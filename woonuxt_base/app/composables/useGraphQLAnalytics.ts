/**
 * GraphQL Analytics Composable –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
 * –°–ª–µ–¥–∏ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∏ –ø—Ä–æ–±–ª–µ–º–∏—Ç–µ
 */

interface QueryMetrics {
  queryName: string;
  startTime: number;
  endTime?: number;
  duration?: number;
  dataSize?: number;
  variables?: any;
  error?: string;
  cacheHit?: boolean;
}

let queryMetrics: QueryMetrics[] = [];
const isAnalyticsEnabled = ref(false);

export function useGraphQLAnalytics() {
  /**
   * –ó–∞–ø–æ—á–≤–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ GraphQL –∑–∞—è–≤–∫–∞
   */
  function startQueryTracking(queryName: string, variables?: any): string {
    if (!isAnalyticsEnabled.value) return '';

    const trackingId = `${queryName}-${Date.now()}-${Math.random()}`;

    queryMetrics.push({
      queryName,
      startTime: performance.now(),
      variables: variables ? JSON.parse(JSON.stringify(variables)) : undefined,
    });

    console.log(`üöÄ GraphQL Query Started: ${queryName}`, variables);
    return trackingId;
  }

  /**
   * –ó–∞–≤—ä—Ä—à–≤–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ GraphQL –∑–∞—è–≤–∫–∞
   */
  function endQueryTracking(queryName: string, data?: any, error?: string) {
    if (!isAnalyticsEnabled.value) return;

    const metric = queryMetrics.find(
      (m) => m.queryName === queryName && !m.endTime && m.startTime > performance.now() - 30000, // –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥–∏
    );

    if (metric) {
      metric.endTime = performance.now();
      metric.duration = metric.endTime - metric.startTime;
      metric.error = error;

      if (data) {
        // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∏—è —Ä–∞–∑–º–µ—Ä –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
        metric.dataSize = JSON.stringify(data).length;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞
      analyzeQueryPerformance(metric);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫–∞
   */
  function analyzeQueryPerformance(metric: QueryMetrics) {
    const { queryName, duration, dataSize, variables } = metric;

    console.group(`üìä GraphQL Analytics: ${queryName}`);
    console.log(`‚è±Ô∏è Duration: ${duration?.toFixed(2)}ms`);
    console.log(`üì¶ Data Size: ${dataSize ? (dataSize / 1024).toFixed(2) + 'KB' : 'N/A'}`);
    console.log(`üîß Variables:`, variables);

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç
    if (duration && duration > 2000) {
      console.warn(`üö® SLOW QUERY: ${queryName} took ${duration.toFixed(2)}ms`);
    }

    if (dataSize && dataSize > 500000) {
      console.warn(`üö® LARGE RESPONSE: ${queryName} returned ${(dataSize / 1024).toFixed(2)}KB`);
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∏ –∞–Ω–∞–ª–∏–∑–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –∑–∞—è–≤–∫–∏
    if (queryName === 'getProducts') {
      analyzeProductsQuery(metric);
    } else if (queryName === 'getProductsCount') {
      analyzeCountQuery(metric);
    }

    console.groupEnd();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –∑–∞—è–≤–∫–∏ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏
   */
  function analyzeProductsQuery(metric: QueryMetrics) {
    const { variables, duration, dataSize } = metric;

    if (variables?.first) {
      const productsRequested = variables.first;
      const avgTimePerProduct = duration ? duration / productsRequested : 0;

      console.log(`üìà Products Requested: ${productsRequested}`);
      console.log(`‚ö° Avg Time per Product: ${avgTimePerProduct.toFixed(2)}ms`);

      if (avgTimePerProduct > 50) {
        console.warn(`üö® HIGH LATENCY: ${avgTimePerProduct.toFixed(2)}ms per product`);

        // –ü—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        if (productsRequested > 50) {
          console.log(`üí° SUGGESTION: Reduce 'first' parameter (currently ${productsRequested})`);
        }

        if (variables.slug && variables.slug.length > 0) {
          console.log(`üí° SUGGESTION: Consider category-specific optimization for: ${variables.slug.join(', ')}`);
        }
      }
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä–∞ –∑–∞—è–≤–∫–∏ –∑–∞ –±—Ä–æ–π–∫–∞
   */
  function analyzeCountQuery(metric: QueryMetrics) {
    const { variables, duration } = metric;

    if (variables?.first > 1000) {
      console.warn(`üö® INEFFICIENT COUNT: Loading ${variables.first} items just to count`);
      console.log(`üí° SUGGESTION: Use category.count field or implement dedicated count query`);
    }
  }

  /**
   * –í—Ä—ä—â–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç
   */
  function getPerformanceStats() {
    const stats = {
      totalQueries: queryMetrics.length,
      avgDuration: 0,
      slowQueries: 0,
      largeResponses: 0,
      errors: 0,
    };

    const completedMetrics = queryMetrics.filter((m) => m.duration);

    if (completedMetrics.length > 0) {
      stats.avgDuration = completedMetrics.reduce((sum, m) => sum + (m.duration || 0), 0) / completedMetrics.length;
      stats.slowQueries = completedMetrics.filter((m) => (m.duration || 0) > 2000).length;
      stats.largeResponses = completedMetrics.filter((m) => (m.dataSize || 0) > 500000).length;
      stats.errors = queryMetrics.filter((m) => m.error).length;
    }

    return stats;
  }

  /**
   * –ò–∑—á–∏—Å—Ç–≤–∞ –º–µ—Ç—Ä–∏–∫–∏—Ç–µ
   */
  function clearMetrics() {
    queryMetrics = [];
  }

  /**
   * –ü–æ–∫–∞–∑–≤–∞ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
   */
  function showOptimizationSuggestions() {
    console.group('üéØ GraphQL Optimization Suggestions');

    const stats = getPerformanceStats();

    if (stats.slowQueries > 0) {
      console.log(`‚ö†Ô∏è Found ${stats.slowQueries} slow queries (>2s)`);
      console.log('üí° Consider implementing cursor-based pagination');
      console.log('üí° Reduce GraphQL fragment complexity');
      console.log('üí° Add database indexes for category queries');
    }

    if (stats.largeResponses > 0) {
      console.log(`‚ö†Ô∏è Found ${stats.largeResponses} large responses (>500KB)`);
      console.log('üí° Remove unnecessary fields from Grid fragments');
      console.log('üí° Limit variations per product in listing queries');
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞ –Ω–∞–π-–∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏—Ç–µ –∑–∞—è–≤–∫–∏
    const queryTypes = queryMetrics.reduce(
      (acc, metric) => {
        acc[metric.queryName] = (acc[metric.queryName] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>,
    );

    const mostUsedQuery = Object.entries(queryTypes).sort(([, a], [, b]) => b - a)[0];
    if (mostUsedQuery) {
      console.log(`üìä Most used query: ${mostUsedQuery[0]} (${mostUsedQuery[1]} times)`);
      console.log('üí° Consider implementing caching for this query');
    }

    console.groupEnd();
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–∞/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  function toggleAnalytics(enabled: boolean) {
    isAnalyticsEnabled.value = enabled;
    console.log(`üîß GraphQL Analytics ${enabled ? 'ENABLED' : 'DISABLED'}`);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–µ–Ω–µ –Ω–∞ useAsyncGql
   */
  function setupAutoTracking() {
    // –¢–æ–∑–∏ –∫–æ–¥ —â–µ —Å–µ –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞ –≤ useAsyncGql –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ
    if (process.client && isAnalyticsEnabled.value) {
      console.log('üîß GraphQL Auto-tracking enabled');
    }
  }

  return {
    isAnalyticsEnabled: readonly(isAnalyticsEnabled),
    startQueryTracking,
    endQueryTracking,
    getPerformanceStats,
    clearMetrics,
    showOptimizationSuggestions,
    toggleAnalytics,
    setupAutoTracking,
  };
}
