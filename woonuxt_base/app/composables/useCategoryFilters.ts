// –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù COMPOSABLE –ó–ê –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–ù–ò –§–ò–õ–¢–†–ò
// –ò–∑–ø–æ–ª–∑–≤–∞ –º–∏–Ω–∏–º–∞–ª–Ω–∞ GraphQL –∑–∞—è–≤–∫–∞ + –∫–µ—à–∏—Ä–∞–Ω–µ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è

import { ref, computed, readonly } from 'vue';

// –ö–µ—à –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
const categoryAttributesCache = new Map<
  string,
  {
    terms: any[];
    timestamp: number;
    ttl: number; // Time to live –≤ –º–∏–ª–∏—Å–µ–∫—É–Ω–¥–∏
  }
>();

// –ö–µ—à TTL - 10 –º–∏–Ω—É—Ç–∏
const CACHE_TTL = 10 * 60 * 1000;

export const useCategoryFilters = () => {
  const loading = ref(false);
  const error = ref<string | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∫–µ—à–∞ –µ –≤–∞–ª–∏–¥–µ–Ω
  const isCacheValid = (cacheKey: string): boolean => {
    const cached = categoryAttributesCache.get(cacheKey);
    if (!cached) return false;

    const now = Date.now();
    return now - cached.timestamp < cached.ttl;
  };

  // –ó–∞—Ä–µ–∂–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–Ω–∏ —Ñ–∏–ª—Ç—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  const loadCategoryFilters = async (categorySlug: string): Promise<any[]> => {
    const cacheKey = `category-${categorySlug}`;

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∫–µ—à–∞ –ø—ä—Ä–≤–æ
    if (isCacheValid(cacheKey)) {
      console.log(`üöÄ –ö–ï–®–ò–†–ê–ù–ò —Ñ–∏–ª—Ç—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categorySlug}`);
      return categoryAttributesCache.get(cacheKey)!.terms;
    }

    loading.value = true;
    error.value = null;

    try {
      console.log(`üéØ –ó–∞—Ä–µ–∂–¥–∞–º –û–ü–¢–ò–ú–ò–ó–ò–†–ê–ù–ò —Ñ–∏–ª—Ç—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categorySlug}`);

      let allProducts: any[] = [];
      let hasNextPage = true;
      let after: string | null = null;
      let batchCount = 0;
      const maxBatches = 5; // –ú–∞–∫—Å–∏–º—É–º 5 batch-–∞ (500 –ø—Ä–æ–¥—É–∫—Ç–∞)

      // –ó–∞—Ä–µ–∂–¥–∞–º–µ –ø–∞–≥–∏–Ω–∏—Ä–∞–Ω–æ –∑–∞ –¥–∞ –Ω–µ –ø—Ä–µ—Ç–æ–≤–∞—Ä–∏–º –∑–∞—è–≤–∫–∞—Ç–∞
      while (hasNextPage && batchCount < maxBatches) {
        const variables: any = {
          slug: [categorySlug],
          first: 100,
        };

        if (after) {
          variables.after = after;
        }

        const { data } = await useAsyncGql('getCategoryAttributes', variables);
        const batch = data.value?.products?.nodes || [];

        if (batch.length === 0) break;

        allProducts.push(...batch);

        const pageInfo = data.value?.products?.pageInfo;
        hasNextPage = pageInfo?.hasNextPage || false;
        after = pageInfo?.endCursor || null;
        batchCount++;

        console.log(`üì¶ Batch ${batchCount}: +${batch.length} –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–±—â–æ: ${allProducts.length})`);

        // –ü—Ä–µ–∫—ä—Å–≤–∞–º–µ –∞–∫–æ –∏–º–∞–º–µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥–∞–Ω–Ω–∏ –∑–∞ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∏ —Ñ–∏–ª—Ç—Ä–∏
        if (allProducts.length >= 200) {
          console.log(`‚ö° –°–ø–∏—Ä–∞–º–µ –Ω–∞ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞ –±—ä—Ä–∑–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ`);
          break;
        }
      }

      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–≤–∞–º ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏`);

      // –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–µ—Ä–º–∏–Ω–∏—Ç–µ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
      const termMap = new Map<string, any>();

      for (const product of allProducts) {
        // –û—Ç product.terms (–º–∞—Ä–∫–∏, –µ—Ç–∏–∫–µ—Ç–∏)
        if (product.terms?.nodes) {
          for (const term of product.terms.nodes) {
            if (term.slug && term.name && term.taxonomyName) {
              const key = `${term.taxonomyName}-${term.slug}`;
              if (!termMap.has(key)) {
                termMap.set(key, {
                  slug: term.slug,
                  name: term.name,
                  taxonomyName: term.taxonomyName,
                  databaseId: term.databaseId || 0,
                  count: 0,
                });
              }
              termMap.get(key)!.count++;
            }
          }
        }

        // –û—Ç product.attributes (—Ä–∞–∑–º–µ—Ä–∏, —Ü–≤–µ—Ç–æ–≤–µ)
        if (product.attributes?.nodes) {
          for (const attr of product.attributes.nodes) {
            const taxonomyName = `PA${attr.name?.toUpperCase()?.replace(/\s+/g, '') || 'UNKNOWN'}`;

            // –û—Ç options (–∑–∞ –ø—Ä–æ—Å—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏)
            if (attr.options && Array.isArray(attr.options)) {
              for (const option of attr.options) {
                if (typeof option === 'string' && option.trim()) {
                  const slug = option.toLowerCase().replace(/\s+/g, '-');
                  const key = `${taxonomyName}-${slug}`;
                  if (!termMap.has(key)) {
                    termMap.set(key, {
                      slug: slug,
                      name: option,
                      taxonomyName: taxonomyName,
                      databaseId: 0,
                      count: 0,
                    });
                  }
                  termMap.get(key)!.count++;
                }
              }
            }

            // –û—Ç terms (–∑–∞ –≥–ª–æ–±–∞–ª–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∏)
            if (attr.terms?.nodes) {
              for (const term of attr.terms.nodes) {
                if (term.slug && term.name && term.taxonomyName) {
                  const key = `${term.taxonomyName}-${term.slug}`;
                  if (!termMap.has(key)) {
                    termMap.set(key, {
                      slug: term.slug,
                      name: term.name,
                      taxonomyName: term.taxonomyName,
                      databaseId: term.databaseId || 0,
                      count: 0,
                    });
                  }
                  termMap.get(key)!.count++;
                }
              }
            }
          }
        }
      }

      const terms = Array.from(termMap.values());
      console.log(`‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω–∏ ${terms.length} –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–Ω–∏ —Ç–µ—Ä–º–∏–Ω–∞ –∑–∞ ${categorySlug}`);

      // –ö–µ—à–∏—Ä–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
      categoryAttributesCache.set(cacheKey, {
        terms,
        timestamp: Date.now(),
        ttl: CACHE_TTL,
      });

      return terms;
    } catch (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–Ω–∏ —Ñ–∏–ª—Ç—Ä–∏:', err);
      error.value = '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ñ–∏–ª—Ç—Ä–∏';
      return [];
    } finally {
      loading.value = false;
    }
  };

  // –ò–∑—á–∏—Å—Ç–≤–∞ –∫–µ—à–∞ (–∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ)
  const clearCache = () => {
    categoryAttributesCache.clear();
    console.log('üóëÔ∏è –ö–µ—à–∞ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏ –µ –∏–∑—á–∏—Å—Ç–µ–Ω');
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–µ—à–∞
  const getCacheStats = computed(() => ({
    size: categoryAttributesCache.size,
    keys: Array.from(categoryAttributesCache.keys()),
  }));

  return {
    loading: readonly(loading),
    error: readonly(error),
    loadCategoryFilters,
    clearCache,
    getCacheStats,
  };
};
