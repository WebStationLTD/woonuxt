interface BoricaPaymentData {
  orderId: string;
  amount: number;
  currency?: string;
  description: string;
  customerEmail?: string;
  merchantData?: string;
}

interface BoricaResponse {
  success: boolean;
  gatewayUrl?: string;
  parameters?: Record<string, string>;
  formData?: string;
  error?: string;
}

export function useBorica() {
  const isProcessing = ref(false);
  const { showError, showSuccess } = useNotifications();

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –ø–ª–∞—â–∞–Ω–µ —á—Ä–µ–∑ Borica
   * @param data - –î–∞–Ω–Ω–∏ –∑–∞ –ø–ª–∞—â–∞–Ω–µ—Ç–æ
   * @returns Promise —Å —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
   */
  async function initiatePayment(
    data: BoricaPaymentData
  ): Promise<BoricaResponse & { debugInfo?: any }> {
    isProcessing.value = true;

    const debugInfo = {
      timestamp: new Date().toISOString(),
      step: "initiating_request",
      requestData: {
        orderId: data.orderId,
        amount: data.amount,
        currency: data.currency || "BGN",
        description: data.description,
        customerEmail: data.customerEmail,
        merchantData: data.merchantData,
      },
      requestUrl: "/api/borica/initiate",
      requestMethod: "POST",
    };

    try {
      console.log("üöÄ DEBUG: Initiating Borica payment request:", debugInfo);

      const requestBody = {
        orderId: data.orderId,
        amount: data.amount,
        currency: data.currency || "BGN",
        description: data.description,
        customerEmail: data.customerEmail,
        merchantData: data.merchantData,
      };

      console.log(
        "üì§ DEBUG: Request body to /api/borica/initiate:",
        requestBody
      );

      // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –ø—Ä–µ–¥–∏ –∑–∞—è–≤–∫–∞—Ç–∞
      const requestStartTime = performance.now();

      const response = await $fetch<BoricaResponse>("/api/borica/initiate", {
        method: "POST",
        body: requestBody,
      });

      const requestEndTime = performance.now();
      const requestDuration = Math.round(requestEndTime - requestStartTime);

      debugInfo.step = "request_completed";
      debugInfo.responseTime = `${requestDuration}ms`;
      debugInfo.response = {
        success: response.success,
        hasFormData: !!response.formData,
        hasGatewayUrl: !!response.gatewayUrl,
        hasParameters: !!response.parameters,
        error: response.error,
        formDataLength: response.formData?.length,
        parametersCount: response.parameters
          ? Object.keys(response.parameters).length
          : 0,
      };

      console.log("üì• DEBUG: Response from /api/borica/initiate:", {
        ...debugInfo,
        fullResponse: response,
      });

      if (response.success && response.formData) {
        console.log("‚úÖ DEBUG: Borica payment initiated successfully");
        return {
          ...response,
          debugInfo,
        };
      } else {
        debugInfo.step = "request_failed";
        debugInfo.error = response.error;
        console.log("‚ùå DEBUG: Borica payment initiation failed:", debugInfo);
        throw new Error(response.error || "Failed to initiate payment");
      }
    } catch (error: any) {
      debugInfo.step = "request_error";
      debugInfo.error = {
        name: error?.name,
        message: error?.message,
        statusCode: error?.statusCode,
        statusMessage: error?.statusMessage,
        data: error?.data,
        stack: error?.stack?.substring(0, 300),
      };

      console.error("üí• DEBUG: Borica payment initiation failed:", debugInfo);
      console.error("Full error object:", error);

      const errorMessage =
        error?.data?.message ||
        error?.message ||
        "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–ª–∞—â–∞–Ω–µ—Ç–æ";
      showError("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–ª–∞—â–∞–Ω–µ", errorMessage);

      return {
        success: false,
        error: errorMessage,
        debugInfo,
      };
    } finally {
      isProcessing.value = false;
    }
  }

  /**
   * –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∫—ä–º Borica gateway
   * @param formData - HTML —Ñ–æ—Ä–º–∞ –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –∫—ä–º Borica
   */
  function redirectToGateway(formData: string): void {
    // –°—ä–∑–¥–∞–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–µ–Ω div –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    const div = document.createElement("div");
    div.innerHTML = formData;
    document.body.appendChild(div);

    // –ù–∞–º–∏—Ä–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —è –∏–∑–ø—Ä–∞—â–∞–º–µ
    const form = div.querySelector("form") as HTMLFormElement;
    if (form) {
      form.submit();
    } else {
      showError("–ì—Ä–µ—à–∫–∞", "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Ñ–æ—Ä–º–∞ –∑–∞ –ø–ª–∞—â–∞–Ω–µ");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–≤–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç Borica –ø–ª–∞—â–∞–Ω–µ
   * @param orderId - ID –Ω–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞
   * @param success - –î–∞–ª–∏ –ø–ª–∞—â–∞–Ω–µ—Ç–æ –µ —É—Å–ø–µ—à–Ω–æ
   * @param message - –°—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
   */
  function handlePaymentResult(
    orderId: string,
    success: boolean,
    message?: string
  ): void {
    if (success) {
      showSuccess("–£—Å–ø–µ—à–Ω–æ –ø–ª–∞—â–∞–Ω–µ", `–ü–æ—Ä—ä—á–∫–∞—Ç–∞ ${orderId} –µ –ø–ª–∞—Ç–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`);

      // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
      const router = useRouter();
      router.push(`/thank-you?order=${orderId}`);
    } else {
      showError(
        "–ù–µ—É—Å–ø–µ—à–Ω–æ –ø–ª–∞—â–∞–Ω–µ",
        message || "–ü–ª–∞—â–∞–Ω–µ—Ç–æ –Ω–µ –±–µ –∑–∞–≤—ä—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."
      );

      // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –æ–±—Ä–∞—Ç–Ω–æ –∫—ä–º checkout
      const router = useRouter();
      router.push("/checkout");
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ Borica –ø–ª–∞—â–∞–Ω–µ
   * @param data - –î–∞–Ω–Ω–∏ –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
   * @returns true –∞–∫–æ –¥–∞–Ω–Ω–∏—Ç–µ —Å–∞ –≤–∞–ª–∏–¥–Ω–∏
   */
  function validatePaymentData(data: BoricaPaymentData): boolean {
    if (!data.orderId || data.orderId.trim() === "") {
      showError("–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞", "–õ–∏–ø—Å–≤–∞ –Ω–æ–º–µ—Ä –Ω–∞ –ø–æ—Ä—ä—á–∫–∞");
      return false;
    }

    if (!data.amount || data.amount <= 0) {
      showError("–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞", "–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞ –∑–∞ –ø–ª–∞—â–∞–Ω–µ");
      return false;
    }

    if (!data.description || data.description.trim() === "") {
      showError("–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞", "–õ–∏–ø—Å–≤–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–ª–∞—â–∞–Ω–µ—Ç–æ");
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–∞ –¥—ä–ª–∂–∏–Ω–∞ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ (Borica –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
    if (data.description.length > 125) {
      showError(
        "–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞",
        "–û–ø–∏—Å–∞–Ω–∏–µ—Ç–æ –µ —Ç–≤—ä—Ä–¥–µ –¥—ä–ª–≥–æ (–º–∞–∫—Å–∏–º—É–º 125 —Å–∏–º–≤–æ–ª–∞)"
      );
      return false;
    }

    return true;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞
   * @param orderData - –î–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  function generateOrderDescription(orderData: any): string {
    const merchantName = "LeaderFitness"; // –ò–ª–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
    const orderNumber = orderData.orderId || orderData.id;

    return `${merchantName} - –ü–æ—Ä—ä—á–∫–∞ #${orderNumber}`;
  }

  /**
   * –ò–∑–≤–ª–∏—á–∞ —Å—É–º–∞—Ç–∞ –æ—Ç –∫–æ–ª–∏—á–∫–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
   * @param cart - –û–±–µ–∫—Ç —Å –∫–æ–ª–∏—á–∫–∞—Ç–∞
   * @returns –°—É–º–∞ –∫–∞—Ç–æ —á–∏—Å–ª–æ
   */
  function extractAmountFromCart(cart: any): number {
    if (!cart || !cart.total) {
      throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –∫–æ–ª–∏—á–∫–∞");
    }

    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ HTML —Ç–∞–≥–æ–≤–µ –∏ –∏–∑–≤–ª–∏—á–∞–º–µ —á–∏—Å–ª–æ—Ç–æ
    const totalString = cart.total.replace(/<[^>]*>/g, "").trim();
    const amountMatch = totalString.match(/[\d,\.]+/);

    if (!amountMatch) {
      throw new Error("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–≤–ª–µ—á–µ —Å—É–º–∞—Ç–∞ –æ—Ç –∫–æ–ª–∏—á–∫–∞—Ç–∞");
    }

    // –ó–∞–º–µ–Ω—è–º–µ –∑–∞–ø–µ—Ç–∞—è—Ç–∞ —Å —Ç–æ—á–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –≤ —á–∏—Å–ª–æ
    const amount = parseFloat(amountMatch[0].replace(",", "."));

    if (isNaN(amount) || amount <= 0) {
      throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Å—É–º–∞ –≤ –∫–æ–ª–∏—á–∫–∞—Ç–∞");
    }

    return amount;
  }

  return {
    isProcessing: readonly(isProcessing),
    initiatePayment,
    redirectToGateway,
    handlePaymentResult,
    validatePaymentData,
    generateOrderDescription,
    extractAmountFromCart,
  };
}
